משימות להיום:
0. לתקן ספר לפי הערות שחר - לתקן לגבי קארודינטות. בוצע - התייחסות ל7 מימדים פר נקודה, בפרק 2.6.2.3.1 input data characteristics.
1. pipeline - throughput and dead cycles adressing - adress 2 pipes seperated and waiting because RAW
2. תרשימי גלים מאקרו-מיקרו להמשיך - נשאר מאקרו של ה-core בלבד.
3. TB להבין מה קורה בקוד ולהכין משלנו בורילוג - להכין TB עכשיו שיש indirect access. לא בוצע
4. לקבל מגואל RAM חדש עם פורט יחיד אם אפשר - בוצע.
5. למלא חלק של block-diagram עבור kmeas-top בספר פרויקט תחת architecture. בוצע

שאלות לשחר מפעם קודמת:
4. אנחנו מבינים שצריך בקר פנימי לTOP, בנוסף ליותר פנימי שנמצא בcore, שיעזור כמו שדיברנו לפני שבועיים+ על כך שהREGFILE יוזם פעולות לכיוון הCORE, וכך גם בהקשר לשאלה 3,
נוכל לטפל בכל דרישה של המסטר.
תשובת שחר:
4. לא לגמרי מבין לאיזה בקר אתץם מתכוונים, אשמח אם תוכלו לחדד את השאלה כך שאבין יותר טוב את הצורך.
הככוונה היא שאם נסתכל על מה שמימשנו עד כה בורילוג, בתכלס למימוש הממשק APB, יש לנו בקר שמנהל את זה(מכונת המצבים apb_st) ולכן בנוסף לבקר הפנימי בcore
יש בקר נוסף בtop, רוצים לוודא שאנחנו באותו ראש בצורך ב2 בקרים כך.
תשובה שניה שחר: כן.

שאלות לשחר:
1. מבחינת pipeline - הכנו 2 תרשימים שהראנו לך שבתכלס מייצגים את הcore , סביר להניח ונוודא זאת שעל כך נועד להיות הpipe כלומר משלב go ולא לגבי תקשורת קודמת.
בהתאם לכך נכין pipeline ונמלא את משימה 2 שמוצגת למעלה.

תשובת שחר: באופן כללי, מצפה לראות תרשימי pipeline של מאקרו (״מערכת״) ושל מיקרו (״יחידות עיקריות״).

2. לגבי סינתטזה של regfile - מצאנו באינטרנט שמערך דו/תלת מימדי סינתזבילי. שעמו את גואל והוא אמר שיכול להיות סימטזבילי,תלויה בגודל ושאפשר לנסות.
האם ניתן ללכת בכיוון זה?
אחרת, עבור לדוגמאה לרגיסטרים של הסנטרוידים, נוכל להדיר רגיסטר אחד אשר מאכסן כל הקורדינטות, אך הוא יהיה גדול מעוד, לפי חישובנו:
7x13=91 bits
במקרה של רגיסטרים האקומולטורים,מספר זה עוד יותר גדול: 7X22=134 bits
מה דעתך בנושאה? מה יהיה קריא יותר? מה יהיה סימטזבילי?

תשובת שחר: באופן ספציפי עבור RegFile, אין צורך בשימוש ברגיסטרים דו-ממדיים. ההתייחסות צריכה להיות שטוחה (flat), כלומר כל רגיסטר (מממש ׳פרמטר׳) צריך להיות חשוף.

3. לגבי הבקר עבור ה TOP ששאלנו םעם שעבר: בתוך הקוד שכתבנו, הגדרנו סוג שמצבים עבור הapb slave,שהם setup,write,read. האם ה לא כבר מאווה מכונת מצבים?

תשובת שחר: בקר ה-APB אכן מהווה מכונת מצבים. מקווה שזה עונה לשאלה, לא בטוח שהבנתי היכן הבעיה.

4. צריך לדסקס על מצגת אמצע ולהחליט מה לשים שם.

תשובת שחר: מצגת האמצע צריכה להיות במבנה של ספר הפרויקט, מבחינת פרקים. ממליץ שנתחיל באיטרציות של review כאשר תהיו מוכנים (ניתן להתחיל עם template כדי להתכנס למבנה הנכון).

5. איפה בספר פרויקט נכנסות דיאגרמות גלים, איפה נכנס הפייפליין - מדובר בתת מודולים של ה-core, כנראה תחת פרקים 2.6.2.5 ו-2.6.2.6 רק לוודא ששם שניהם.

תשובת שחר: דיאגרמות המאקרו (״מערכת״) צריכות להופיע בפרקים 2.2.1 ו-2.2.2. דיאגרמות המיקרו (״יחידות עיקריות״) צריכות להופיע בפרק 2.6, תחת תתי-הפרקים הרלוונטים (עבור על יחידה ויחידה). 

6. צריך שוב לדון איך לבצע דיאגרמת מאקרו של הcore, כעת נראה שהיא מלאה מדי ובעלת ציר זמן ארוך. אופציונאלי - לחתוך את ציר הזמן לחתיכות וכל חתיכה תוכל להציג שלב בתהליך
של הבקר כנגד היחידות ביצוע כפי שמוצגות במאקרו ארכיטקטורה.

תשובת שחר: בהחלט אפשרי. מה שצריך להיות לכם בראש זה העיקרון/הרעיון מאחורי זה - מי שאף פעם לא שמע על מה שאתם עושים, צריך לפתוח את ספר הפרויקט, להתבונן בדיאגרמה הזאת וישר להבין איך המערכת עובדת. 
זה לא פשוט, אבל אפשרי. צריך לבחור את הסיגנליים העיקריים, אשר מדגישים את המאורעות החשובים מבחינת המערכת. מציע שנוכל להתכנס לנוסחה מנצחת אחרי מספר איטרציות.

7. לעשות וידוא של דיאגרמות מיקרו.

משימות לפעם הבאה:
1. pipeline - throughput and dead cycles adressing - adress 2 pipes seperated and waiting because RAW
2. תרשימי גלים מאקרו-מיקרו - לבצע מאקרו עבור ה-core ולסיים, להכניס הכל לספר פרויקט.
3. TB להבין מה קורה בקוד ולהכין משלנו בורילוג - להכין TB עכשיו שיש indirect access.
4. להכין מצגת אמצע.
